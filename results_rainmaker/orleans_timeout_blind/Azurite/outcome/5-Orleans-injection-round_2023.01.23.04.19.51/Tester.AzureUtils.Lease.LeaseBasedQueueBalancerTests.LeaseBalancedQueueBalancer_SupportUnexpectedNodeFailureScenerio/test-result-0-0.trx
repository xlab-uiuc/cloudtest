<?xml version="1.0" encoding="utf-8"?>
<TestRun id="6ed80850-924e-459d-aca2-d73f36db5ba3" name="anna@cloudtest-win10 2023-01-23 04:39:33" runUser="cloudtest-win10\anna" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <Times creation="2023-01-23T04:39:33.4995270+00:00" queuing="2023-01-23T04:39:33.4995280+00:00" start="2023-01-23T04:39:20.3035834+00:00" finish="2023-01-23T04:39:33.5096512+00:00" />
  <TestSettings name="default" id="881996e5-733a-4c7a-a309-f15671a870a2">
    <Deployment runDeploymentRoot="anna_cloudtest-win10_2023-01-23_04_39_33" />
  </TestSettings>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <ResultSummary outcome="Failed">
    <Counters total="0" executed="0" passed="0" failed="0" error="0" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0" />
    <Output>
      <StdOut>[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v2.4.5+1caef2f33e (64-bit .NET 7.0.2)&#xD;
[xUnit.net 00:00:01.25]   Discovering: Tester.AzureUtils (method display = ClassAndMethod, method display options = None)&#xD;
[xUnit.net 00:00:01.46]   Discovered:  Tester.AzureUtils (found 246 test cases)&#xD;
[xUnit.net 00:00:01.47]   Starting:    Tester.AzureUtils (parallel test collections = off, max threads = 4)&#xD;
</StdOut>
    </Output>
    <RunInfos>
      <RunInfo computerName="cloudtest-win10" outcome="Min" timestamp="2023-01-23T04:39:33.2827816+00:00">
        <Text>The active test run was aborted. Reason: Test host process crashed : Fatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.&#xD;
   at Azure.Storage.Blobs.BlobRestClient.CreateReleaseLeaseRequest(System.String, System.Nullable`1&lt;Int32&gt;, System.Nullable`1&lt;System.DateTimeOffset&gt;, System.Nullable`1&lt;System.DateTimeOffset&gt;, System.String, System.String, System.String)&#xD;
   at Azure.Storage.Blobs.BlobRestClient+&lt;ReleaseLeaseAsync&gt;d__41.MoveNext()&#xD;
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Azure.Storage.Blobs.BlobRestClient+&lt;ReleaseLeaseAsync&gt;d__41, Azure.Storage.Blobs, Version=12.14.0.0, Culture=neutral, PublicKeyToken=92742159e12e44c8]](&lt;ReleaseLeaseAsync&gt;d__41 ByRef)&#xD;
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start[[Azure.Storage.Blobs.BlobRestClient+&lt;ReleaseLeaseAsync&gt;d__41, Azure.Storage.Blobs, Version=12.14.0.0, Culture=neutral, PublicKeyToken=92742159e12e44c8]](&lt;ReleaseLeaseAsync&gt;d__41 ByRef)&#xD;
   at Azure.Storage.Blobs.BlobRestClient.ReleaseLeaseAsync(System.String, System.Nullable`1&lt;Int32&gt;, System.Nullable`1&lt;System.DateTimeOffset&gt;, System.Nullable`1&lt;System.DateTimeOffset&gt;, System.String, System.String, System.String, System.Threading.CancellationToken)&#xD;
   at Azure.Storage.Blobs.Specialized.BlobLeaseClient+&lt;ReleaseInternal&gt;d__32.MoveNext()&#xD;
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Azure.Storage.Blobs.Specialized.BlobLeaseClient+&lt;ReleaseInternal&gt;d__32, Azure.Storage.Blobs, Version=12.14.0.0, Culture=neutral, PublicKeyToken=92742159e12e44c8]](&lt;ReleaseInternal&gt;d__32 ByRef)&#xD;
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start[[Azure.Storage.Blobs.Specialized.BlobLeaseClient+&lt;ReleaseInternal&gt;d__32, Azure.Storage.Blobs, Version=12.14.0.0, Culture=neutral, PublicKeyToken=92742159e12e44c8]](&lt;ReleaseInternal&gt;d__32 ByRef)&#xD;
   at Azure.Storage.Blobs.Specialized.BlobLeaseClient.ReleaseInternal(Azure.RequestConditions, Boolean, System.Threading.CancellationToken)&#xD;
   at Azure.Storage.Blobs.Specialized.BlobLeaseClient+&lt;ReleaseAsync&gt;d__31.MoveNext()&#xD;
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Azure.Storage.Blobs.Specialized.BlobLeaseClient+&lt;ReleaseAsync&gt;d__31, Azure.Storage.Blobs, Version=12.14.0.0, Culture=neutral, PublicKeyToken=92742159e12e44c8]](&lt;ReleaseAsync&gt;d__31 ByRef)&#xD;
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start[[Azure.Storage.Blobs.Specialized.BlobLeaseClient+&lt;ReleaseAsync&gt;d__31, Azure.Storage.Blobs, Version=12.14.0.0, Culture=neutral, PublicKeyToken=92742159e12e44c8]](&lt;ReleaseAsync&gt;d__31 ByRef)&#xD;
   at Azure.Storage.Blobs.Specialized.BlobLeaseClient.ReleaseAsync(Azure.RequestConditions, System.Threading.CancellationToken)&#xD;
   at Orleans.LeaseProviders.AzureBlobLeaseProvider.Release(System.String, Orleans.LeaseProviders.AcquiredLease)&#xD;
   at Orleans.LeaseProviders.AzureBlobLeaseProvider+&lt;Release&gt;d__9.MoveNext()&#xD;
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)&#xD;
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)&#xD;
   at Orleans.LeaseProviders.AzureBlobLeaseProvider.Release(System.String, Orleans.LeaseProviders.AcquiredLease[])&#xD;
   at Orleans.Streams.LeaseBasedQueueBalancer+&lt;ReleaseLeasesToMeetResponsibility&gt;d__21.MoveNext()&#xD;
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)&#xD;
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)&#xD;
   at Orleans.Streams.LeaseBasedQueueBalancer.ReleaseLeasesToMeetResponsibility()&#xD;
   at Orleans.Streams.LeaseBasedQueueBalancer+&lt;AcquireLeasesToMeetResponsibility&gt;d__20.MoveNext()&#xD;
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)&#xD;
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)&#xD;
   at Orleans.Streams.LeaseBasedQueueBalancer.AcquireLeasesToMeetResponsibility()&#xD;
   at Orleans.Streams.LeaseBasedQueueBalancer+&lt;UpdateResponsibilities&gt;d__28.MoveNext()&#xD;
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)&#xD;
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)&#xD;
   at Orleans.Streams.LeaseBasedQueueBalancer.UpdateResponsibilities(System.Collections.Generic.HashSet`1&lt;Orleans.Runtime.SiloAddress&gt;)&#xD;
   at Orleans.Streams.LeaseBasedQueueBalancer+&lt;&gt;c__DisplayClass26_0.&lt;ScheduleUpdateResponsibilities&gt;b__0()&#xD;
   at Orleans.AsyncSerialExecutor+&lt;Wrap&gt;d__2.MoveNext()&#xD;
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)&#xD;
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start[[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)&#xD;
   at Orleans.AsyncSerialExecutor.Wrap(System.Func`1&lt;System.Threading.Tasks.Task&gt;)&#xD;
   at Orleans.AsyncSerialExecutor+&lt;&gt;c__DisplayClass1_0.&lt;AddNext&gt;b__0()&#xD;
   at Orleans.AsyncSerialExecutor`1+&lt;ExecuteNext&gt;d__4[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()&#xD;
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)&#xD;
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)&#xD;
   at Orleans.AsyncSerialExecutor`1[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ExecuteNext()&#xD;
   at Orleans.AsyncSerialExecutor`1[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AddNext(System.Func`1&lt;System.Threading.Tasks.Task`1&lt;Boolean&gt;&gt;)&#xD;
   at Orleans.AsyncSerialExecutor.AddNext(System.Func`1&lt;System.Threading.Tasks.Task&gt;)&#xD;
   at Orleans.Streams.LeaseBasedQueueBalancer+&lt;ScheduleUpdateResponsibilities&gt;d__26.MoveNext()&#xD;
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)&#xD;
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[System.__Canon, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)&#xD;
   at Orleans.Streams.LeaseBasedQueueBalancer.ScheduleUpdateResponsibilities(System.Collections.Generic.HashSet`1&lt;Orleans.Runtime.SiloAddress&gt;)&#xD;
   at Orleans.Streams.LeaseBasedQueueBalancer.OnClusterMembershipChange(System.Collections.Generic.HashSet`1&lt;Orleans.Runtime.SiloAddress&gt;)&#xD;
   at Orleans</Text>
      </RunInfo>
    </RunInfos>
    <CollectorDataEntries>
      <Collector agentName="cloudtest-win10" uri="datacollector://microsoft/TestPlatform/Extensions/Blame/v1" collectorDisplayName="Blame">
        <UriAttachments>
          <UriAttachment>
            <A href="cloudtest-win10\Sequence_5ff7205c83b94b2bb994215e806c22d4.xml"></A>
          </UriAttachment>
        </UriAttachments>
      </Collector>
    </CollectorDataEntries>
  </ResultSummary>
</TestRun>